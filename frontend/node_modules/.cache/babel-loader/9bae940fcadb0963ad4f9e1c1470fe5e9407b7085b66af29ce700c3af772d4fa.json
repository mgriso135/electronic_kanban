{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mgris\\\\Documents\\\\electronic_kanban\\\\frontend\\\\src\\\\components\\\\dashboards\\\\CustomerDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport api from '../../services/api';\nimport KanbanCard from '../kanbans/KanbanCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomerDashboard = () => {\n  _s();\n  const {\n    customerId\n  } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [kanbansByProduct, setKanbansByProduct] = useState({});\n  const [availableCustomers, setAvailableCustomers] = useState([]);\n  const [selectedCustomerId, setSelectedCustomerId] = useState(customerId || '');\n  const [isLoading, setIsLoading] = useState(false); // Keep isLoading state INTERNALLY\n\n  useEffect(() => {\n    fetchCustomersAndKanbans();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedCustomerId]);\n  const fetchCustomersAndKanbans = async () => {\n    setIsLoading(true); // Set loading to true at start\n    try {\n      const accountsResponse = await api.get('/accounts');\n      const customers = accountsResponse.data;\n      setAvailableCustomers(customers);\n      const initialCustomerId = customerId || (customers.length > 0 ? customers[0].id : '');\n      setSelectedCustomerId(initialCustomerId);\n      if (initialCustomerId) {\n        const kanbanResponse = await api.get(`/dashboards/customer/${initialCustomerId}`);\n        let kanbans = kanbanResponse.data.kanbans_by_product;\n        kanbans = sortKanbansByCustomerSupplierAndDate(kanbans);\n        setKanbansByProduct(kanbans);\n      } else {\n        setKanbansByProduct({});\n      }\n    } catch (error) {\n      console.error(\"Error fetching data for customer dashboard\", error);\n    } finally {\n      setIsLoading(false); // Set loading to false in finally block\n    }\n  };\n  const handleCustomerChange = e => {\n    const newCustomerId = e.target.value;\n    setSelectedCustomerId(newCustomerId);\n    if (newCustomerId) {\n      navigate(`/customer-dashboard/${newCustomerId}`);\n    } else {\n      navigate(`/customer-dashboard`);\n    }\n  };\n  const sortKanbansByCustomerSupplierAndDate = useCallback(kanbans => {\n    const sortedKanbans = {\n      ...kanbans\n    };\n    for (const product in sortedKanbans) {\n      sortedKanbans[product].sort((a, b) => {\n        const aMatch = a.customer_supplier === 2 ? -1 : 1;\n        const bMatch = b.customer_supplier === 2 ? -1 : 1;\n        if (aMatch !== bMatch) {\n          return aMatch - bMatch;\n        }\n        return new Date(a.data_aggiornamento) - new Date(b.data_aggiornamento);\n      });\n    }\n    return sortedKanbans;\n  }, []);\n  const handleKanbanUpdate = useCallback((updatedKanban, productID) => {\n    // **ADD CONDITIONAL CHECK AT THE VERY BEGINNING:**\n    if (!kanbansByProduct || !kanbansByProduct[productID] || !Array.isArray(kanbansByProduct[productID])) {\n      console.warn(\"handleKanbanUpdate: Data not ready, aborting update. productID:\", productID); // Warning log - KEEP THIS\n      return; // ABORT FUNCTION IF DATA IS NOT READY\n    }\n\n    // **Create a closure to capture productID:**\n    const updateState = prevKanbansByProduct => {\n      console.log(\"handleKanbanUpdate - setKanbansByProduct CALLBACK - productID value (INSIDE CALLBACK - CHECK HERE):\", productID); // Log productID - INSIDE CALLBACK\n\n      // Safety checks (already present - keep them, but they might be redundant now)\n      if (!prevKanbansByProduct || !prevKanbansByProduct[productID] || !Array.isArray(prevKanbansByProduct[productID])) {\n        console.warn(\"handleKanbanUpdate: prevKanbansByProduct or product data is not properly initialized yet (inside setState - closure). This should not happen frequently now.\");\n        return prevKanbansByProduct || {}; // Redundant safety return, but keep it.\n      }\n      const updatedProductKanbans = prevKanbansByProduct[productID].map(k => k.kanban_id === updatedKanban.kanban_id ? updatedKanban : k);\n      const nextKanbansByProduct = {\n        ...prevKanbansByProduct\n      };\n      nextKanbansByProduct[productID] = sortKanbansByCustomerSupplierAndDate({\n        [productID]: updatedProductKanbans\n      })[productID];\n      return nextKanbansByProduct;\n    };\n    setKanbansByProduct(updateState, () => {\n      // Use the closure 'updateState' as the setState function\n      console.log(\"handleKanbanUpdate - setKanbansByProduct CALLBACK EXECUTED - productID after setState:\", productID); // Log productID AFTER setState\n    });\n  }, [sortKanbansByCustomerSupplierAndDate, kanbansByProduct]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Customer Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Customer:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedCustomerId,\n        onChange: handleCustomerChange,\n        disabled: isLoading,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a Customer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), availableCustomers.map(customer => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: customer.id,\n          children: customer.name\n        }, customer.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), !isLoading && selectedCustomerId && Object.keys(kanbansByProduct).length > 0 ? Object.keys(kanbansByProduct).map(product => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: product\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: '20px'\n        },\n        children: kanbansByProduct[product].map(kanban => {\n          console.log(\"Dashboard Component - Rendering KanbanCard for product:\", product, \"kanban_id:\", kanban.kanban_id); // ADD THIS LOG\n          return /*#__PURE__*/_jsxDEV(KanbanCard, {\n            kanban: kanban,\n            dashboardType: \"customer\",\n            setKanbans: handleKanbanUpdate,\n            productID: product\n          }, kanban.kanban_id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 9\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 25\n      }, this)]\n    }, product, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 21\n    }, this)) : selectedCustomerId ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No Kanban data found for this customer.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 38\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please select a customer to view Kanban data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 87\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n};\n_s(CustomerDashboard, \"1gsCEGHExr9KJWSA6bmjxx5wsmg=\", false, function () {\n  return [useParams, useNavigate, useLocation];\n});\n_c = CustomerDashboard;\nexport default CustomerDashboard;\nvar _c;\n$RefreshReg$(_c, \"CustomerDashboard\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","useNavigate","useLocation","api","KanbanCard","jsxDEV","_jsxDEV","CustomerDashboard","_s","customerId","navigate","location","kanbansByProduct","setKanbansByProduct","availableCustomers","setAvailableCustomers","selectedCustomerId","setSelectedCustomerId","isLoading","setIsLoading","fetchCustomersAndKanbans","accountsResponse","get","customers","data","initialCustomerId","length","id","kanbanResponse","kanbans","kanbans_by_product","sortKanbansByCustomerSupplierAndDate","error","console","handleCustomerChange","e","newCustomerId","target","value","sortedKanbans","product","sort","a","b","aMatch","customer_supplier","bMatch","Date","data_aggiornamento","handleKanbanUpdate","updatedKanban","productID","Array","isArray","warn","updateState","prevKanbansByProduct","log","updatedProductKanbans","map","k","kanban_id","nextKanbansByProduct","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","disabled","customer","name","Object","keys","style","display","flexWrap","gap","kanban","dashboardType","setKanbans","_c","$RefreshReg$"],"sources":["C:/Users/mgris/Documents/electronic_kanban/frontend/src/components/dashboards/CustomerDashboard.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\r\nimport api from '../../services/api';\r\nimport KanbanCard from '../kanbans/KanbanCard';\r\n\r\nconst CustomerDashboard = () => {\r\n    const { customerId } = useParams();\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const [kanbansByProduct, setKanbansByProduct] = useState({});\r\n    const [availableCustomers, setAvailableCustomers] = useState([]);\r\n    const [selectedCustomerId, setSelectedCustomerId] = useState(customerId || '');\r\n    const [isLoading, setIsLoading] = useState(false); // Keep isLoading state INTERNALLY\r\n\r\n    useEffect(() => {\r\n        fetchCustomersAndKanbans();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [selectedCustomerId]);\r\n\r\n    const fetchCustomersAndKanbans = async () => {\r\n        setIsLoading(true); // Set loading to true at start\r\n        try {\r\n            const accountsResponse = await api.get('/accounts');\r\n            const customers = accountsResponse.data;\r\n            setAvailableCustomers(customers);\r\n\r\n            const initialCustomerId = customerId || (customers.length > 0 ? customers[0].id : '');\r\n            setSelectedCustomerId(initialCustomerId);\r\n\r\n            if (initialCustomerId) {\r\n                const kanbanResponse = await api.get(`/dashboards/customer/${initialCustomerId}`);\r\n                let kanbans = kanbanResponse.data.kanbans_by_product;\r\n                kanbans = sortKanbansByCustomerSupplierAndDate(kanbans);\r\n                setKanbansByProduct(kanbans);\r\n            } else {\r\n                setKanbansByProduct({});\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching data for customer dashboard\", error);\r\n        } finally {\r\n            setIsLoading(false); // Set loading to false in finally block\r\n        }\r\n    };\r\n\r\n    const handleCustomerChange = (e) => {\r\n        const newCustomerId = e.target.value;\r\n        setSelectedCustomerId(newCustomerId);\r\n\r\n        if (newCustomerId) {\r\n            navigate(`/customer-dashboard/${newCustomerId}`);\r\n        } else {\r\n            navigate(`/customer-dashboard`);\r\n        }\r\n    };\r\n\r\n    const sortKanbansByCustomerSupplierAndDate = useCallback((kanbans) => {\r\n        const sortedKanbans = { ...kanbans };\r\n        for (const product in sortedKanbans) {\r\n            sortedKanbans[product].sort((a, b) => {\r\n                const aMatch = a.customer_supplier === 2 ? -1 : 1;\r\n                const bMatch = b.customer_supplier === 2 ? -1 : 1;\r\n                if (aMatch !== bMatch) {\r\n                    return aMatch - bMatch;\r\n                }\r\n                return new Date(a.data_aggiornamento) - new Date(b.data_aggiornamento);\r\n            });\r\n        }\r\n        return sortedKanbans;\r\n    }, []);\r\n\r\n\r\n    const handleKanbanUpdate = useCallback((updatedKanban, productID) => {\r\n        // **ADD CONDITIONAL CHECK AT THE VERY BEGINNING:**\r\n        if (!kanbansByProduct || !kanbansByProduct[productID] || !Array.isArray(kanbansByProduct[productID])) {\r\n            console.warn(\"handleKanbanUpdate: Data not ready, aborting update. productID:\", productID); // Warning log - KEEP THIS\r\n            return; // ABORT FUNCTION IF DATA IS NOT READY\r\n        }\r\n\r\n        // **Create a closure to capture productID:**\r\n        const updateState = (prevKanbansByProduct) => {\r\n            console.log(\"handleKanbanUpdate - setKanbansByProduct CALLBACK - productID value (INSIDE CALLBACK - CHECK HERE):\", productID); // Log productID - INSIDE CALLBACK\r\n\r\n            // Safety checks (already present - keep them, but they might be redundant now)\r\n            if (!prevKanbansByProduct || !prevKanbansByProduct[productID] || !Array.isArray(prevKanbansByProduct[productID])) {\r\n                console.warn(\"handleKanbanUpdate: prevKanbansByProduct or product data is not properly initialized yet (inside setState - closure). This should not happen frequently now.\");\r\n                return prevKanbansByProduct || {}; // Redundant safety return, but keep it.\r\n            }\r\n\r\n            const updatedProductKanbans = prevKanbansByProduct[productID].map(k =>\r\n                k.kanban_id === updatedKanban.kanban_id ? updatedKanban : k\r\n            );\r\n            const nextKanbansByProduct = { ...prevKanbansByProduct };\r\n            nextKanbansByProduct[productID] = sortKanbansByCustomerSupplierAndDate({ [productID]: updatedProductKanbans })[productID];\r\n            return nextKanbansByProduct;\r\n        };\r\n\r\n\r\n        setKanbansByProduct(updateState, () => { // Use the closure 'updateState' as the setState function\r\n            console.log(\"handleKanbanUpdate - setKanbansByProduct CALLBACK EXECUTED - productID after setState:\", productID); // Log productID AFTER setState\r\n        });\r\n    }, [sortKanbansByCustomerSupplierAndDate, kanbansByProduct]);\r\n\r\n    return (\r\n        <div>\r\n            <h2>Customer Dashboard</h2>\r\n            <div>\r\n                <label>Select Customer:</label>\r\n                <select value={selectedCustomerId} onChange={handleCustomerChange} disabled={isLoading}>\r\n                    <option value=\"\">Select a Customer</option>\r\n                    {availableCustomers.map(customer => (\r\n                        <option key={customer.id} value={customer.id}>{customer.name}</option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n\r\n            {/* Conditional rendering for the entire Kanban card section */}\r\n            {!isLoading && selectedCustomerId && Object.keys(kanbansByProduct).length > 0 ? (\r\n                Object.keys(kanbansByProduct).map(product => (\r\n                    <div key={product}>\r\n                        <h3>{product}</h3>\r\n                        <div style={{ display: 'flex', flexWrap: 'wrap', gap: '20px' }}>\r\n                        {kanbansByProduct[product].map(kanban => {\r\n    console.log(\"Dashboard Component - Rendering KanbanCard for product:\", product, \"kanban_id:\", kanban.kanban_id); // ADD THIS LOG\r\n    return (\r\n        <KanbanCard \r\n            key={kanban.kanban_id} \r\n            kanban={kanban} \r\n            dashboardType=\"customer\" \r\n            setKanbans={handleKanbanUpdate}  \r\n            productID={product}             \r\n        />\r\n    )\r\n})}\r\n                        </div>\r\n                    </div>\r\n                ))\r\n            ) : (\r\n                selectedCustomerId ? <p>No Kanban data found for this customer.</p> : <p>Please select a customer to view Kanban data</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CustomerDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}