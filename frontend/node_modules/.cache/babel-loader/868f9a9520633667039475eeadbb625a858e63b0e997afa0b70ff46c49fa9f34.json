{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mgris\\\\Documents\\\\electronic_kanban\\\\frontend\\\\src\\\\components\\\\dashboards\\\\CustomerDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react'; // Import useCallback\nimport { useParams, useNavigate, useLocation } from 'react-router-dom'; // Import useNavigate, useLocation\nimport api from '../../services/api';\nimport KanbanCard from '../kanbans/KanbanCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomerDashboard = () => {\n  _s();\n  const {\n    customerId\n  } = useParams();\n  const navigate = useNavigate(); // Hook for navigation\n  const location = useLocation(); // Hook to get current location\n  const [kanbansByProduct, setKanbansByProduct] = useState({});\n  const [availableCustomers, setAvailableCustomers] = useState([]);\n  const [selectedCustomerId, setSelectedCustomerId] = useState(customerId || '');\n  useEffect(() => {\n    fetchCustomersAndKanbans();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedCustomerId]);\n  const fetchCustomersAndKanbans = async () => {\n    try {\n      const accountsResponse = await api.get('/accounts');\n      const customers = accountsResponse.data;\n      setAvailableCustomers(customers);\n\n      // If customerId is in URL, use it, otherwise default to first customer or empty selection\n      const initialCustomerId = customerId || (customers.length > 0 ? customers[0].id : '');\n      setSelectedCustomerId(initialCustomerId);\n      if (initialCustomerId) {\n        // Fetch kanbans only if a customer is selected\n        const kanbanResponse = await api.get(`/dashboards/customer/${initialCustomerId}`);\n        let kanbans = kanbanResponse.data.kanbans_by_product;\n        kanbans = sortKanbansByCustomerSupplierAndDate(kanbans);\n        setKanbansByProduct(kanbans);\n      } else {\n        setKanbansByProduct({}); // Clear kanbans if no customer selected\n      }\n    } catch (error) {\n      console.error(\"Error fetching data for customer dashboard\", error);\n    }\n  };\n  const handleCustomerChange = e => {\n    const newCustomerId = e.target.value;\n    setSelectedCustomerId(newCustomerId);\n    if (newCustomerId) {\n      navigate(`/customer-dashboard/${newCustomerId}`); // Update URL to include customerId\n    } else {\n      navigate(`/customer-dashboard`); // Navigate to generic dashboard if no customer selected\n    }\n  };\n  const sortKanbansByCustomerSupplierAndDate = useCallback(kanbans => {\n    // Use useCallback\n    const sortedKanbans = {\n      ...kanbans\n    };\n    for (const product in sortedKanbans) {\n      sortedKanbans[product].sort((a, b) => {\n        const aMatch = a.customer_supplier === 2 ? -1 : 1; // Customer role is 2\n        const bMatch = b.customer_supplier === 2 ? -1 : 1; // Customer role is 2\n        if (aMatch !== bMatch) {\n          return aMatch - bMatch;\n        }\n        return new Date(a.data_aggiornamento) - new Date(b.data_aggiornamento);\n      });\n    }\n    return sortedKanbans;\n  }, []);\n  const handleKanbanUpdate = useCallback((updatedKanban, productID) => {\n    // Use useCallback and accept productID\n    setKanbansByProduct(prevKanbansByProduct => {\n      const updatedProductKanbans = prevKanbansByProduct[productID].map(k => k.kanban_id === updatedKanban.kanban_id ? updatedKanban : k);\n      return {\n        ...prevKanbansByProduct,\n        [productID]: sortKanbansByCustomerSupplierAndDate({\n          [productID]: updatedProductKanbans\n        })[productID] // Re-sort only the updated product's kanbans and update state immutably\n      };\n    });\n  }, [sortKanbansByCustomerSupplierAndDate]); // Dependency array includes sort function\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Customer Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Customer:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedCustomerId,\n        onChange: handleCustomerChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a Customer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), availableCustomers.map(customer => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: customer.id,\n          children: customer.name\n        }, customer.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), selectedCustomerId && Object.keys(kanbansByProduct).length > 0 ?\n    // Conditionally render kanban data\n    Object.keys(kanbansByProduct).map(product => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: product\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: '20px'\n        },\n        children: kanbansByProduct[product].map(kanban => /*#__PURE__*/_jsxDEV(KanbanCard, {\n          kanban: kanban,\n          dashboardType: \"customer\",\n          setKanbans: handleKanbanUpdate // Pass handleKanbanUpdate\n          ,\n          productID: product\n        }, kanban.kanban_id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 33\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 25\n      }, this)]\n    }, product, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }, this)) : selectedCustomerId ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No Kanban data found for this customer.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 38\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please select a customer to view Kanban data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 87\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n_s(CustomerDashboard, \"alI6zQRTYzCwYVzjdngMpmf3Bm0=\", false, function () {\n  return [useParams, useNavigate, useLocation];\n});\n_c = CustomerDashboard;\nexport default CustomerDashboard;\nvar _c;\n$RefreshReg$(_c, \"CustomerDashboard\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","useNavigate","useLocation","api","KanbanCard","jsxDEV","_jsxDEV","CustomerDashboard","_s","customerId","navigate","location","kanbansByProduct","setKanbansByProduct","availableCustomers","setAvailableCustomers","selectedCustomerId","setSelectedCustomerId","fetchCustomersAndKanbans","accountsResponse","get","customers","data","initialCustomerId","length","id","kanbanResponse","kanbans","kanbans_by_product","sortKanbansByCustomerSupplierAndDate","error","console","handleCustomerChange","e","newCustomerId","target","value","sortedKanbans","product","sort","a","b","aMatch","customer_supplier","bMatch","Date","data_aggiornamento","handleKanbanUpdate","updatedKanban","productID","prevKanbansByProduct","updatedProductKanbans","map","k","kanban_id","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","customer","name","Object","keys","style","display","flexWrap","gap","kanban","dashboardType","setKanbans","_c","$RefreshReg$"],"sources":["C:/Users/mgris/Documents/electronic_kanban/frontend/src/components/dashboards/CustomerDashboard.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'; // Import useCallback\r\nimport { useParams, useNavigate, useLocation } from 'react-router-dom'; // Import useNavigate, useLocation\r\nimport api from '../../services/api';\r\nimport KanbanCard from '../kanbans/KanbanCard';\r\n\r\nconst CustomerDashboard = () => {\r\n    const { customerId } = useParams();\r\n    const navigate = useNavigate(); // Hook for navigation\r\n    const location = useLocation(); // Hook to get current location\r\n    const [kanbansByProduct, setKanbansByProduct] = useState({});\r\n    const [availableCustomers, setAvailableCustomers] = useState([]);\r\n    const [selectedCustomerId, setSelectedCustomerId] = useState(customerId || '');\r\n\r\n\r\n    useEffect(() => {\r\n        fetchCustomersAndKanbans();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [selectedCustomerId]);\r\n\r\n    const fetchCustomersAndKanbans = async () => {\r\n        try {\r\n            const accountsResponse = await api.get('/accounts');\r\n            const customers = accountsResponse.data;\r\n            setAvailableCustomers(customers);\r\n\r\n            // If customerId is in URL, use it, otherwise default to first customer or empty selection\r\n            const initialCustomerId = customerId || (customers.length > 0 ? customers[0].id : '');\r\n            setSelectedCustomerId(initialCustomerId);\r\n\r\n\r\n            if (initialCustomerId) { // Fetch kanbans only if a customer is selected\r\n                const kanbanResponse = await api.get(`/dashboards/customer/${initialCustomerId}`);\r\n                let kanbans = kanbanResponse.data.kanbans_by_product;\r\n                kanbans = sortKanbansByCustomerSupplierAndDate(kanbans);\r\n                setKanbansByProduct(kanbans);\r\n            } else {\r\n                setKanbansByProduct({}); // Clear kanbans if no customer selected\r\n            }\r\n\r\n\r\n        } catch (error) {\r\n            console.error(\"Error fetching data for customer dashboard\", error);\r\n        }\r\n    };\r\n\r\n    const handleCustomerChange = (e) => {\r\n        const newCustomerId = e.target.value;\r\n        setSelectedCustomerId(newCustomerId);\r\n\r\n        if (newCustomerId) {\r\n            navigate(`/customer-dashboard/${newCustomerId}`); // Update URL to include customerId\r\n        } else {\r\n            navigate(`/customer-dashboard`); // Navigate to generic dashboard if no customer selected\r\n        }\r\n\r\n    };\r\n\r\n    const sortKanbansByCustomerSupplierAndDate = useCallback((kanbans) => { // Use useCallback\r\n        const sortedKanbans = { ...kanbans };\r\n        for (const product in sortedKanbans) {\r\n            sortedKanbans[product].sort((a, b) => {\r\n                const aMatch = a.customer_supplier === 2 ? -1 : 1; // Customer role is 2\r\n                const bMatch = b.customer_supplier === 2 ? -1 : 1; // Customer role is 2\r\n                if (aMatch !== bMatch) {\r\n                    return aMatch - bMatch;\r\n                }\r\n                return new Date(a.data_aggiornamento) - new Date(b.data_aggiornamento);\r\n            });\r\n        }\r\n        return sortedKanbans;\r\n    }, []);\r\n\r\n\r\n    const handleKanbanUpdate = useCallback((updatedKanban, productID) => { // Use useCallback and accept productID\r\n        setKanbansByProduct(prevKanbansByProduct => {\r\n            const updatedProductKanbans = prevKanbansByProduct[productID].map(k =>\r\n                k.kanban_id === updatedKanban.kanban_id ? updatedKanban : k\r\n            );\r\n            return {\r\n                ...prevKanbansByProduct,\r\n                [productID]: sortKanbansByCustomerSupplierAndDate({ [productID]: updatedProductKanbans })[productID] // Re-sort only the updated product's kanbans and update state immutably\r\n            };\r\n        });\r\n    }, [sortKanbansByCustomerSupplierAndDate]); // Dependency array includes sort function\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2>Customer Dashboard</h2>\r\n            <div>\r\n                <label>Select Customer:</label>\r\n                <select value={selectedCustomerId} onChange={handleCustomerChange}>\r\n                    <option value=\"\">Select a Customer</option>\r\n                    {availableCustomers.map(customer => (\r\n                        <option key={customer.id} value={customer.id}>{customer.name}</option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n\r\n            {selectedCustomerId && Object.keys(kanbansByProduct).length > 0 ? ( // Conditionally render kanban data\r\n                Object.keys(kanbansByProduct).map(product => (\r\n                    <div key={product}>\r\n                        <h3>{product}</h3>\r\n                        <div style={{ display: 'flex', flexWrap: 'wrap', gap: '20px' }}>\r\n                            {kanbansByProduct[product].map(kanban => (\r\n                                <KanbanCard\r\n                                    key={kanban.kanban_id}\r\n                                    kanban={kanban}\r\n                                    dashboardType=\"customer\"\r\n                                    setKanbans={handleKanbanUpdate} // Pass handleKanbanUpdate\r\n                                    productID={product}\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                ))\r\n            ) : (\r\n                selectedCustomerId ? <p>No Kanban data found for this customer.</p> : <p>Please select a customer to view Kanban data</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CustomerDashboard;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO,CAAC,CAAC;AACjE,SAASC,SAAS,EAAEC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AACxE,OAAOC,GAAG,MAAM,oBAAoB;AACpC,OAAOC,UAAU,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM;IAAEC;EAAW,CAAC,GAAGT,SAAS,CAAC,CAAC;EAClC,MAAMU,QAAQ,GAAGT,WAAW,CAAC,CAAC,CAAC,CAAC;EAChC,MAAMU,QAAQ,GAAGT,WAAW,CAAC,CAAC,CAAC,CAAC;EAChC,MAAM,CAACU,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5D,MAAM,CAACiB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAACmB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGpB,QAAQ,CAACY,UAAU,IAAI,EAAE,CAAC;EAG9EX,SAAS,CAAC,MAAM;IACZoB,wBAAwB,CAAC,CAAC;IAC1B;EACJ,CAAC,EAAE,CAACF,kBAAkB,CAAC,CAAC;EAExB,MAAME,wBAAwB,GAAG,MAAAA,CAAA,KAAY;IACzC,IAAI;MACA,MAAMC,gBAAgB,GAAG,MAAMhB,GAAG,CAACiB,GAAG,CAAC,WAAW,CAAC;MACnD,MAAMC,SAAS,GAAGF,gBAAgB,CAACG,IAAI;MACvCP,qBAAqB,CAACM,SAAS,CAAC;;MAEhC;MACA,MAAME,iBAAiB,GAAGd,UAAU,KAAKY,SAAS,CAACG,MAAM,GAAG,CAAC,GAAGH,SAAS,CAAC,CAAC,CAAC,CAACI,EAAE,GAAG,EAAE,CAAC;MACrFR,qBAAqB,CAACM,iBAAiB,CAAC;MAGxC,IAAIA,iBAAiB,EAAE;QAAE;QACrB,MAAMG,cAAc,GAAG,MAAMvB,GAAG,CAACiB,GAAG,CAAC,wBAAwBG,iBAAiB,EAAE,CAAC;QACjF,IAAII,OAAO,GAAGD,cAAc,CAACJ,IAAI,CAACM,kBAAkB;QACpDD,OAAO,GAAGE,oCAAoC,CAACF,OAAO,CAAC;QACvDd,mBAAmB,CAACc,OAAO,CAAC;MAChC,CAAC,MAAM;QACHd,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC7B;IAGJ,CAAC,CAAC,OAAOiB,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;IACtE;EACJ,CAAC;EAED,MAAME,oBAAoB,GAAIC,CAAC,IAAK;IAChC,MAAMC,aAAa,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;IACpCnB,qBAAqB,CAACiB,aAAa,CAAC;IAEpC,IAAIA,aAAa,EAAE;MACfxB,QAAQ,CAAC,uBAAuBwB,aAAa,EAAE,CAAC,CAAC,CAAC;IACtD,CAAC,MAAM;MACHxB,QAAQ,CAAC,qBAAqB,CAAC,CAAC,CAAC;IACrC;EAEJ,CAAC;EAED,MAAMmB,oCAAoC,GAAG9B,WAAW,CAAE4B,OAAO,IAAK;IAAE;IACpE,MAAMU,aAAa,GAAG;MAAE,GAAGV;IAAQ,CAAC;IACpC,KAAK,MAAMW,OAAO,IAAID,aAAa,EAAE;MACjCA,aAAa,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QAClC,MAAMC,MAAM,GAAGF,CAAC,CAACG,iBAAiB,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACnD,MAAMC,MAAM,GAAGH,CAAC,CAACE,iBAAiB,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACnD,IAAID,MAAM,KAAKE,MAAM,EAAE;UACnB,OAAOF,MAAM,GAAGE,MAAM;QAC1B;QACA,OAAO,IAAIC,IAAI,CAACL,CAAC,CAACM,kBAAkB,CAAC,GAAG,IAAID,IAAI,CAACJ,CAAC,CAACK,kBAAkB,CAAC;MAC1E,CAAC,CAAC;IACN;IACA,OAAOT,aAAa;EACxB,CAAC,EAAE,EAAE,CAAC;EAGN,MAAMU,kBAAkB,GAAGhD,WAAW,CAAC,CAACiD,aAAa,EAAEC,SAAS,KAAK;IAAE;IACnEpC,mBAAmB,CAACqC,oBAAoB,IAAI;MACxC,MAAMC,qBAAqB,GAAGD,oBAAoB,CAACD,SAAS,CAAC,CAACG,GAAG,CAACC,CAAC,IAC/DA,CAAC,CAACC,SAAS,KAAKN,aAAa,CAACM,SAAS,GAAGN,aAAa,GAAGK,CAC9D,CAAC;MACD,OAAO;QACH,GAAGH,oBAAoB;QACvB,CAACD,SAAS,GAAGpB,oCAAoC,CAAC;UAAE,CAACoB,SAAS,GAAGE;QAAsB,CAAC,CAAC,CAACF,SAAS,CAAC,CAAC;MACzG,CAAC;IACL,CAAC,CAAC;EACN,CAAC,EAAE,CAACpB,oCAAoC,CAAC,CAAC,CAAC,CAAC;;EAG5C,oBACIvB,OAAA;IAAAiD,QAAA,gBACIjD,OAAA;MAAAiD,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3BrD,OAAA;MAAAiD,QAAA,gBACIjD,OAAA;QAAAiD,QAAA,EAAO;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC/BrD,OAAA;QAAQ8B,KAAK,EAAEpB,kBAAmB;QAAC4C,QAAQ,EAAE5B,oBAAqB;QAAAuB,QAAA,gBAC9DjD,OAAA;UAAQ8B,KAAK,EAAC,EAAE;UAAAmB,QAAA,EAAC;QAAiB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EAC1C7C,kBAAkB,CAACsC,GAAG,CAACS,QAAQ,iBAC5BvD,OAAA;UAA0B8B,KAAK,EAAEyB,QAAQ,CAACpC,EAAG;UAAA8B,QAAA,EAAEM,QAAQ,CAACC;QAAI,GAA/CD,QAAQ,CAACpC,EAAE;UAAA+B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAA6C,CACxE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,EAEL3C,kBAAkB,IAAI+C,MAAM,CAACC,IAAI,CAACpD,gBAAgB,CAAC,CAACY,MAAM,GAAG,CAAC;IAAK;IAChEuC,MAAM,CAACC,IAAI,CAACpD,gBAAgB,CAAC,CAACwC,GAAG,CAACd,OAAO,iBACrChC,OAAA;MAAAiD,QAAA,gBACIjD,OAAA;QAAAiD,QAAA,EAAKjB;MAAO;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAClBrD,OAAA;QAAK2D,KAAK,EAAE;UAAEC,OAAO,EAAE,MAAM;UAAEC,QAAQ,EAAE,MAAM;UAAEC,GAAG,EAAE;QAAO,CAAE;QAAAb,QAAA,EAC1D3C,gBAAgB,CAAC0B,OAAO,CAAC,CAACc,GAAG,CAACiB,MAAM,iBACjC/D,OAAA,CAACF,UAAU;UAEPiE,MAAM,EAAEA,MAAO;UACfC,aAAa,EAAC,UAAU;UACxBC,UAAU,EAAExB,kBAAmB,CAAC;UAAA;UAChCE,SAAS,EAAEX;QAAQ,GAJd+B,MAAM,CAACf,SAAS;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKxB,CACJ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC;IAAA,GAZArB,OAAO;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAaZ,CACR,CAAC,GAEF3C,kBAAkB,gBAAGV,OAAA;MAAAiD,QAAA,EAAG;IAAuC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAAGrD,OAAA;MAAAiD,QAAA,EAAG;IAA4C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC3H;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACnD,EAAA,CApHID,iBAAiB;EAAA,QACIP,SAAS,EACfC,WAAW,EACXC,WAAW;AAAA;AAAAsE,EAAA,GAH1BjE,iBAAiB;AAsHvB,eAAeA,iBAAiB;AAAC,IAAAiE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}